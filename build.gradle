plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "java"
}

group "io.github.divinerealms"
version "0.0.1-BETA"

repositories {
    mavenCentral()
    maven {
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        url = "https://repo.kryptonmc.org/releases"
    }
    maven {
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url = 'https://oss.sonatype.org/content/repositories/central'
    }
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.0"

    compileOnly 'org.spigotmc:spigot:1.8.8-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.1'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    compileOnly 'co.aikar:acf-paper:0.5.1-SNAPSHOT'
    compileOnly 'com.arcaniax:HeadDatabase-API:1.3.1'

    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

test {
    useJUnitPlatform()
}